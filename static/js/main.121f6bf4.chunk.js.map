{"version":3,"sources":["components/tile/tile.js","components/gameContainer/gamecontainer.js","App.js","serviceWorker.js","index.js"],"names":["randomColor","require","TileComponent","props","react_default","a","createElement","className","onClick","handleClick","id","style","color","luminosity","icon","GameContainerComponent","state","tiles","score","highscore","key","console","log","_this","find","tile","i","count","setState","this","alert","sort","Math","random","gameOver","forEach","_this2","Fragment","Container_default","map","components_tile_tile","React","Component","App","gamecontainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mkCAIIA,SAAcC,EAAQ,IA4BXC,MAjBf,SAAuBC,GACrB,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,KACEK,MAAO,CACLC,MAAOZ,EAAY,CACjBa,WAAY,YAGhBN,UAAWJ,EAAMW,wBChBnBF,QAAQZ,KAoFCe,6MAjFbC,MAAQ,CAAEC,QAAOC,MAAO,EAAGC,UAAW,KAGtCV,YAAc,SAAAW,GACZC,QAAQC,IAAI,UAAYF,GAIxBG,EAAKP,MAAMC,MAAMO,KAAK,SAACC,EAAMC,GAC3B,GAAID,EAAKf,KAAOU,EAAK,CACnB,GAAuB,IAAnBH,EAAMS,GAAGC,MAWX,OATAV,EAAMS,GAAGC,MAAQV,EAAMS,GAAGC,MAAQ,EAClCJ,EAAKK,SAAS,CAAEV,MAAOK,EAAKP,MAAME,MAAQ,GAAK,WACpB,KAArBW,KAAKb,MAAME,OACbY,MAAM,YAERT,QAAQC,IAAIO,KAAKb,MAAME,SAGzBK,EAAKP,MAAMC,MAAMc,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAGPV,EAAKW,WACLb,QAAQC,IAAI,mBAOpBY,SAAW,WAcT,OAXIX,EAAKP,MAAME,MAAQK,EAAKP,MAAMG,WAChCI,EAAKK,SAAS,CAAET,UAAWI,EAAKP,MAAME,QAGxCK,EAAKP,MAAMC,MAAMkB,QAAQ,SAAAlB,GACvBA,EAAMU,MAAQ,IAEhBJ,EAAKP,MAAMC,MAAMc,KAAK,kBAAMC,KAAKC,SAAW,KAC5CH,MAAM,cAENP,EAAKK,SAAS,CAAEV,MAAO,KAChB,2EAGA,IAAAkB,EAAAP,KACDZ,EAAQY,KAAKb,MAAMC,MACzB,OACEb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACEjC,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAWE,UAAU,SACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,UACSH,EAAAC,EAAAC,cAAA,WADT,2EAKFF,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAWE,UAAU,SACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,UAAmCsB,KAAKb,MAAME,OAC9Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,cAAuCsB,KAAKb,MAAMG,YAEpDf,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAWE,UAAU,iBAClBU,EAAMsB,IAAI,SAAAtB,GAAK,OACdb,EAAAC,EAAAC,cAACkC,EAAD,CACEpB,IAAKH,EAAMP,GACXA,GAAIO,EAAMP,GACVI,KAAMG,EAAMH,KACZa,MAAOV,EAAMU,MACbf,MAAOA,EAEPH,YAAa2B,EAAK3B,yBAzEKgC,IAAMC,WCI5BC,MARf,WACE,OACEvC,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,KACED,EAAAC,EAAAC,cAACsC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.121f6bf4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./tile.css\";\r\n\r\n// * Random Color\r\nvar randomColor = require(\"randomcolor\");\r\n\r\n// class TileComponent extends React.Component {\r\n//   state = {\r\n//     clickCount: 0\r\n//   };\r\n\r\n//   handleIncrement = () => {\r\n//     this.setState({ count: this.state.count + 1 });\r\n//   };\r\n\r\nfunction TileComponent(props) {\r\n  return (\r\n    // *on click, deliver tile id prop to handleClick function\r\n    <div className=\"tile\" onClick={() => props.handleClick(props.id)}>\r\n      <i\r\n        style={{\r\n          color: randomColor({\r\n            luminosity: \"bright\"\r\n          })\r\n        }}\r\n        className={props.icon}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n// }\r\n\r\nexport default TileComponent;\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport tiles from \"../../tiles.json\";\r\nimport Tile from \"../tile/tile\";\r\nimport \"./gameContainer.css\";\r\n\r\n// *Color Generator\r\nimport randomColor from \"randomcolor\";\r\n// const randomColor = require(\"randomcolor\"); // import the script\r\nconst color = randomColor();\r\n\r\nclass GameContainerComponent extends React.Component {\r\n  state = { tiles, score: 0, highscore: 0 };\r\n\r\n  // *Logic for click event\r\n  handleClick = key => {\r\n    console.log(\"click! \" + key);\r\n    // Find key of clicked item and iterate count\r\n    // !Linter Fix\r\n    // eslint-disable-next-line array-callback-return\r\n    this.state.tiles.find((tile, i) => {\r\n      if (tile.id === key) {\r\n        if (tiles[i].count === 0) {\r\n          // if count = 0, iterate, else game over\r\n          tiles[i].count = tiles[i].count + 1;\r\n          this.setState({ score: this.state.score + 1 }, function() {\r\n            if (this.state.score === 16) {\r\n              alert(\"You Win!\");\r\n            }\r\n            console.log(this.state.score);\r\n          });\r\n          // Re-order tiles for next turn\r\n          this.state.tiles.sort(() => Math.random() - 0.5);\r\n          return true;\r\n        } else {\r\n          // call gameOver function\r\n          this.gameOver();\r\n          console.log(\"game over\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  //!GAME OVER FUNCTION\r\n  gameOver = () => {\r\n    // * Check to see if the high-score has been surpassed!\r\n    // set high score to value of score if current score is higher on gameOver()\r\n    if (this.state.score > this.state.highscore) {\r\n      this.setState({ highscore: this.state.score });\r\n    }\r\n    // reset count on all tiles\r\n    this.state.tiles.forEach(tiles => {\r\n      tiles.count = 0;\r\n    });\r\n    this.state.tiles.sort(() => Math.random() - 0.5);\r\n    alert(\"Game Over!\");\r\n    // set game score back to 0\r\n    this.setState({ score: 0 });\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    const tiles = this.state.tiles;\r\n    return (\r\n      <>\r\n        <Container className=\"hello\">\r\n          <div className=\"helloTile\">\r\n            Hello. <br /> This is a simple memory game. Try and click each icon,\r\n            but only once.\r\n          </div>\r\n        </Container>\r\n        <Container className=\"score\">\r\n          <div className=\"scoreTile\">SCORE: {this.state.score}</div>\r\n          <div className=\"scoreTile\">HIGHSCORE: {this.state.highscore}</div>\r\n        </Container>\r\n        <Container className=\"gameContainer\">\r\n          {tiles.map(tiles => (\r\n            <Tile\r\n              key={tiles.id}\r\n              id={tiles.id}\r\n              icon={tiles.icon}\r\n              count={tiles.count}\r\n              color={color}\r\n              // function\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameContainerComponent;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// *Components\r\nimport Container from \"react-bootstrap/Container\";\r\nimport GameContainerComponent from \"./components/gameContainer/gamecontainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <GameContainerComponent />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}